// Code generated by mockery v2.35.3. DO NOT EDIT.

package clustertool

import mock "github.com/stretchr/testify/mock"

// mockStoppable is an autogenerated mock type for the stoppable type
type mockStoppable struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *mockStoppable) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *mockStoppable) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockStoppable creates a new instance of mockStoppable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockStoppable(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStoppable {
	mock := &mockStoppable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
