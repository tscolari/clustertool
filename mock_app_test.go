// Code generated by mockery v2.35.3. DO NOT EDIT.

package clustertool

import (
	serf "github.com/hashicorp/serf/serf"
	mock "github.com/stretchr/testify/mock"
)

// MockApp is an autogenerated mock type for the App type
type MockApp struct {
	mock.Mock
}

// Apply provides a mock function with given fields: cmd
func (_m *MockApp) Apply(cmd []byte) error {
	ret := _m.Called(cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Node provides a mock function with given fields:
func (_m *MockApp) Node() Node {
	ret := _m.Called()

	var r0 Node
	if rf, ok := ret.Get(0).(func() Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Node)
		}
	}

	return r0
}

// SendQuery provides a mock function with given fields: name, payload, params
func (_m *MockApp) SendQuery(name string, payload []byte, params *serf.QueryParam) (EventResponse, error) {
	ret := _m.Called(name, payload, params)

	var r0 EventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte, *serf.QueryParam) (EventResponse, error)); ok {
		return rf(name, payload, params)
	}
	if rf, ok := ret.Get(0).(func(string, []byte, *serf.QueryParam) EventResponse); ok {
		r0 = rf(name, payload, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []byte, *serf.QueryParam) error); ok {
		r1 = rf(name, payload, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToQuery provides a mock function with given fields: name, action
func (_m *MockApp) SubscribeToQuery(name string, action func(*serf.Query) error) error {
	ret := _m.Called(name, action)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(*serf.Query) error) error); ok {
		r0 = rf(name, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockApp creates a new instance of MockApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApp {
	mock := &MockApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
