// Code generated by mockery v2.35.3. DO NOT EDIT.

package clustertool

import mock "github.com/stretchr/testify/mock"

// mockAddressable is an autogenerated mock type for the addressable type
type mockAddressable struct {
	mock.Mock
}

// Address provides a mock function with given fields:
func (_m *mockAddressable) Address() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *mockAddressable) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// newMockAddressable creates a new instance of mockAddressable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAddressable(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAddressable {
	mock := &mockAddressable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
