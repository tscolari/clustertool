// Code generated by mockery v2.35.3. DO NOT EDIT.

package mocks

import (
	serf "github.com/hashicorp/serf/serf"
	mock "github.com/stretchr/testify/mock"
)

// HashicorpSerf is an autogenerated mock type for the HashicorpSerf type
type HashicorpSerf struct {
	mock.Mock
}

// Join provides a mock function with given fields: addresses, ignoreOld
func (_m *HashicorpSerf) Join(addresses []string, ignoreOld bool) (int, error) {
	ret := _m.Called(addresses, ignoreOld)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, bool) (int, error)); ok {
		return rf(addresses, ignoreOld)
	}
	if rf, ok := ret.Get(0).(func([]string, bool) int); ok {
		r0 = rf(addresses, ignoreOld)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]string, bool) error); ok {
		r1 = rf(addresses, ignoreOld)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyManager provides a mock function with given fields:
func (_m *HashicorpSerf) KeyManager() *serf.KeyManager {
	ret := _m.Called()

	var r0 *serf.KeyManager
	if rf, ok := ret.Get(0).(func() *serf.KeyManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serf.KeyManager)
		}
	}

	return r0
}

// Leave provides a mock function with given fields:
func (_m *HashicorpSerf) Leave() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Members provides a mock function with given fields:
func (_m *HashicorpSerf) Members() []serf.Member {
	ret := _m.Called()

	var r0 []serf.Member
	if rf, ok := ret.Get(0).(func() []serf.Member); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]serf.Member)
		}
	}

	return r0
}

// Query provides a mock function with given fields: name, payload, params
func (_m *HashicorpSerf) Query(name string, payload []byte, params *serf.QueryParam) (*serf.QueryResponse, error) {
	ret := _m.Called(name, payload, params)

	var r0 *serf.QueryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte, *serf.QueryParam) (*serf.QueryResponse, error)); ok {
		return rf(name, payload, params)
	}
	if rf, ok := ret.Get(0).(func(string, []byte, *serf.QueryParam) *serf.QueryResponse); ok {
		r0 = rf(name, payload, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serf.QueryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []byte, *serf.QueryParam) error); ok {
		r1 = rf(name, payload, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTags provides a mock function with given fields: tags
func (_m *HashicorpSerf) SetTags(tags map[string]string) error {
	ret := _m.Called(tags)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]string) error); ok {
		r0 = rf(tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields:
func (_m *HashicorpSerf) Shutdown() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHashicorpSerf creates a new instance of HashicorpSerf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHashicorpSerf(t interface {
	mock.TestingT
	Cleanup(func())
}) *HashicorpSerf {
	mock := &HashicorpSerf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
