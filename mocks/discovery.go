// Code generated by mockery v2.35.3. DO NOT EDIT.

package mocks

import (
	serf "github.com/hashicorp/serf/serf"
	mock "github.com/stretchr/testify/mock"
)

// Discovery is an autogenerated mock type for the Discovery type
type Discovery struct {
	mock.Mock
}

// Address provides a mock function with given fields:
func (_m *Discovery) Address() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConnectedNodes provides a mock function with given fields:
func (_m *Discovery) ConnectedNodes() []serf.Member {
	ret := _m.Called()

	var r0 []serf.Member
	if rf, ok := ret.Get(0).(func() []serf.Member); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]serf.Member)
		}
	}

	return r0
}

// Done provides a mock function with given fields:
func (_m *Discovery) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// JoinNodes provides a mock function with given fields: nodes
func (_m *Discovery) JoinNodes(nodes ...string) error {
	_va := make([]interface{}, len(nodes))
	for _i := range nodes {
		_va[_i] = nodes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(nodes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyManager provides a mock function with given fields:
func (_m *Discovery) KeyManager() *serf.KeyManager {
	ret := _m.Called()

	var r0 *serf.KeyManager
	if rf, ok := ret.Get(0).(func() *serf.KeyManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serf.KeyManager)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Discovery) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SendEvent provides a mock function with given fields: name, payload, params
func (_m *Discovery) SendEvent(name string, payload []byte, params *serf.QueryParam) (*serf.QueryResponse, error) {
	ret := _m.Called(name, payload, params)

	var r0 *serf.QueryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte, *serf.QueryParam) (*serf.QueryResponse, error)); ok {
		return rf(name, payload, params)
	}
	if rf, ok := ret.Get(0).(func(string, []byte, *serf.QueryParam) *serf.QueryResponse); ok {
		r0 = rf(name, payload, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serf.QueryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []byte, *serf.QueryParam) error); ok {
		r1 = rf(name, payload, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTags provides a mock function with given fields: _a0
func (_m *Discovery) SetTags(_a0 map[string]string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Discovery) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeToEvent provides a mock function with given fields: et, action
func (_m *Discovery) SubscribeToEvent(et serf.EventType, action func(serf.Event)) {
	_m.Called(et, action)
}

// Tags provides a mock function with given fields:
func (_m *Discovery) Tags() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// NewDiscovery creates a new instance of Discovery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDiscovery(t interface {
	mock.TestingT
	Cleanup(func())
}) *Discovery {
	mock := &Discovery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
