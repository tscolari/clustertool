// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	raft "github.com/hashicorp/raft"
)

// ConfigurationFuture is an autogenerated mock type for the configurationFuture type
type ConfigurationFuture struct {
	mock.Mock
}

// Configuration provides a mock function with given fields:
func (_m *ConfigurationFuture) Configuration() raft.Configuration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Configuration")
	}

	var r0 raft.Configuration
	if rf, ok := ret.Get(0).(func() raft.Configuration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(raft.Configuration)
	}

	return r0
}

// Error provides a mock function with given fields:
func (_m *ConfigurationFuture) Error() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Index provides a mock function with given fields:
func (_m *ConfigurationFuture) Index() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// NewConfigurationFuture creates a new instance of ConfigurationFuture. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigurationFuture(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigurationFuture {
	mock := &ConfigurationFuture{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
