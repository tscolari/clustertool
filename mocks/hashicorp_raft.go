// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	raft "github.com/hashicorp/raft"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// HashicorpRaft is an autogenerated mock type for the HashicorpRaft type
type HashicorpRaft struct {
	mock.Mock
}

// AddNonvoter provides a mock function with given fields: id, addr, prevIndex, timeout
func (_m *HashicorpRaft) AddNonvoter(id raft.ServerID, addr raft.ServerAddress, prevIndex uint64, timeout time.Duration) raft.IndexFuture {
	ret := _m.Called(id, addr, prevIndex, timeout)

	if len(ret) == 0 {
		panic("no return value specified for AddNonvoter")
	}

	var r0 raft.IndexFuture
	if rf, ok := ret.Get(0).(func(raft.ServerID, raft.ServerAddress, uint64, time.Duration) raft.IndexFuture); ok {
		r0 = rf(id, addr, prevIndex, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.IndexFuture)
		}
	}

	return r0
}

// AddVoter provides a mock function with given fields: id, addr, prevIndex, timeout
func (_m *HashicorpRaft) AddVoter(id raft.ServerID, addr raft.ServerAddress, prevIndex uint64, timeout time.Duration) raft.IndexFuture {
	ret := _m.Called(id, addr, prevIndex, timeout)

	if len(ret) == 0 {
		panic("no return value specified for AddVoter")
	}

	var r0 raft.IndexFuture
	if rf, ok := ret.Get(0).(func(raft.ServerID, raft.ServerAddress, uint64, time.Duration) raft.IndexFuture); ok {
		r0 = rf(id, addr, prevIndex, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.IndexFuture)
		}
	}

	return r0
}

// Apply provides a mock function with given fields: cmd, timeout
func (_m *HashicorpRaft) Apply(cmd []byte, timeout time.Duration) raft.ApplyFuture {
	ret := _m.Called(cmd, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 raft.ApplyFuture
	if rf, ok := ret.Get(0).(func([]byte, time.Duration) raft.ApplyFuture); ok {
		r0 = rf(cmd, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.ApplyFuture)
		}
	}

	return r0
}

// GetConfiguration provides a mock function with given fields:
func (_m *HashicorpRaft) GetConfiguration() raft.ConfigurationFuture {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguration")
	}

	var r0 raft.ConfigurationFuture
	if rf, ok := ret.Get(0).(func() raft.ConfigurationFuture); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.ConfigurationFuture)
		}
	}

	return r0
}

// LeaderCh provides a mock function with given fields:
func (_m *HashicorpRaft) LeaderCh() <-chan bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LeaderCh")
	}

	var r0 <-chan bool
	if rf, ok := ret.Get(0).(func() <-chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan bool)
		}
	}

	return r0
}

// LeaderWithID provides a mock function with given fields:
func (_m *HashicorpRaft) LeaderWithID() (raft.ServerAddress, raft.ServerID) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LeaderWithID")
	}

	var r0 raft.ServerAddress
	var r1 raft.ServerID
	if rf, ok := ret.Get(0).(func() (raft.ServerAddress, raft.ServerID)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() raft.ServerAddress); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(raft.ServerAddress)
	}

	if rf, ok := ret.Get(1).(func() raft.ServerID); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(raft.ServerID)
	}

	return r0, r1
}

// LeadershipTransfer provides a mock function with given fields:
func (_m *HashicorpRaft) LeadershipTransfer() raft.Future {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LeadershipTransfer")
	}

	var r0 raft.Future
	if rf, ok := ret.Get(0).(func() raft.Future); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.Future)
		}
	}

	return r0
}

// RemoveServer provides a mock function with given fields: id, prevIndex, timeout
func (_m *HashicorpRaft) RemoveServer(id raft.ServerID, prevIndex uint64, timeout time.Duration) raft.IndexFuture {
	ret := _m.Called(id, prevIndex, timeout)

	if len(ret) == 0 {
		panic("no return value specified for RemoveServer")
	}

	var r0 raft.IndexFuture
	if rf, ok := ret.Get(0).(func(raft.ServerID, uint64, time.Duration) raft.IndexFuture); ok {
		r0 = rf(id, prevIndex, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.IndexFuture)
		}
	}

	return r0
}

// Shutdown provides a mock function with given fields:
func (_m *HashicorpRaft) Shutdown() raft.Future {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 raft.Future
	if rf, ok := ret.Get(0).(func() raft.Future); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.Future)
		}
	}

	return r0
}

// NewHashicorpRaft creates a new instance of HashicorpRaft. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHashicorpRaft(t interface {
	mock.TestingT
	Cleanup(func())
}) *HashicorpRaft {
	mock := &HashicorpRaft{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
