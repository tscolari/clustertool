// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	io "io"

	raft "github.com/hashicorp/raft"
	mock "github.com/stretchr/testify/mock"
)

// FSM is an autogenerated mock type for the FSM type
type FSM struct {
	mock.Mock
}

// Apply provides a mock function with given fields: _a0
func (_m *FSM) Apply(_a0 *raft.Log) interface{} {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*raft.Log) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Restore provides a mock function with given fields: snapshot
func (_m *FSM) Restore(snapshot io.ReadCloser) error {
	ret := _m.Called(snapshot)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.ReadCloser) error); ok {
		r0 = rf(snapshot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Snapshot provides a mock function with given fields:
func (_m *FSM) Snapshot() (raft.FSMSnapshot, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Snapshot")
	}

	var r0 raft.FSMSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func() (raft.FSMSnapshot, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() raft.FSMSnapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.FSMSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFSM creates a new instance of FSM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFSM(t interface {
	mock.TestingT
	Cleanup(func())
}) *FSM {
	mock := &FSM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
