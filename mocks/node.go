// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	clustertool "github.com/tscolari/clustertool"

	time "time"
)

// Node is an autogenerated mock type for the Node type
type Node struct {
	mock.Mock
}

// Apply provides a mock function with given fields: _a0, _a1
func (_m *Node) Apply(_a0 []byte, _a1 time.Duration) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, time.Duration) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cluster provides a mock function with given fields:
func (_m *Node) Cluster() ([]*clustertool.NodeInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cluster")
	}

	var r0 []*clustertool.NodeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*clustertool.NodeInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*clustertool.NodeInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*clustertool.NodeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectToNode provides a mock function with given fields: _a0
func (_m *Node) ConnectToNode(_a0 ...string) error {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConnectToNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Done provides a mock function with given fields:
func (_m *Node) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// IsLeader provides a mock function with given fields:
func (_m *Node) IsLeader() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsLeader")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Leader provides a mock function with given fields:
func (_m *Node) Leader() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Leader")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Node) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SendEvent provides a mock function with given fields: name, payload, params
func (_m *Node) SendEvent(name string, payload []byte, params *clustertool.QueryParam) (clustertool.EventResponse, error) {
	ret := _m.Called(name, payload, params)

	if len(ret) == 0 {
		panic("no return value specified for SendEvent")
	}

	var r0 clustertool.EventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte, *clustertool.QueryParam) (clustertool.EventResponse, error)); ok {
		return rf(name, payload, params)
	}
	if rf, ok := ret.Get(0).(func(string, []byte, *clustertool.QueryParam) clustertool.EventResponse); ok {
		r0 = rf(name, payload, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clustertool.EventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []byte, *clustertool.QueryParam) error); ok {
		r1 = rf(name, payload, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields:
func (_m *Node) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeToEvent provides a mock function with given fields: queryName, action
func (_m *Node) SubscribeToEvent(queryName string, action func(clustertool.Query)) {
	_m.Called(queryName, action)
}

// Tag provides a mock function with given fields: _a0
func (_m *Node) Tag(_a0 string) (string, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Tag")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NewNode creates a new instance of Node. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *Node {
	mock := &Node{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
